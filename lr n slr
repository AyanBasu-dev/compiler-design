For the following grammar write a program to determine whether it is acceptable by LR (0) parser or SLR (1) parser

E --> T + E / T
T --> id

Main C file:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "closure_goto.h"
#include "parsingtable.h"
#include "first_follow.h"

intmain()
{
    start();

    initialize_first_follow();
    compute_first();
    compute_follow();

    create_parsing_table();

    return0;
}

closure_goto.h header file:
// Variables used in most of the other modules.

charitems[30][100][100];
charaugmented_grammar[100][100], terminals[10], nonterminals[10];
intno_of_productions = 0, no_of_states = 0, no_of_items[30], no_of_terminals = 0, no_of_nonterminals = 0;

charFIRST[2][10][10];
charFOLLOW[10][10];

// Variables used only in this module.

intstate_index = 0, goto_state_index = 0, closure_item_index = 0;

intcheck(char c)
{
    inti;

    for (i = 0; i<no_of_terminals; i++)
        if (terminals[i] == c)
            return1;

    return0;
}

voidgenerate_terminals()
{
    inti, j;
    int index = 0;

    for (i = 0; i<no_of_productions; i++)
    {
        for (j = 0; augmented_grammar[i][j] != '>'; j++)
            ;
        j++;

        for (; augmented_grammar[i][j] != '\0'; j++)
        {
            if (augmented_grammar[i][j] <65 || augmented_grammar[i][j] >90)
            {
                if(!check(augmented_grammar[i][j]))
                {
                    terminals[index] = augmented_grammar[i][j];
                    no_of_terminals++;
                    index++;
                }
            }
        }
    }

    terminals[index] = '$';
    no_of_terminals++;
    index++;
    terminals[index] = '\0';
}

int check2(char c, int index)
{
    inti;

    for (i = 0; i< index; i++)
        if (nonterminals[i] == c)
            return1;

    return0;
}

voidgenerate_nonterminals()
{
    inti, index = 0;

    for (i = 0; i<no_of_productions; i++)
        if(!check2(augmented_grammar[i][0], index))
        {
            nonterminals[index] = augmented_grammar[i][0];
            index++;
        }

    no_of_nonterminals = index;
    nonterminals[index] = '\0';
}

voidinitialize_items()
{
    generate_terminals();
    generate_nonterminals();

    inti;

    for (i = 0; i<30; i++)
        no_of_items[i] = 0;
}

voidgenerate_item(char *s, char *t)
{
    inti;

    for (i = 0; i<3; i++)
        t[i] = s[i];

    t[i] = '.';

    if (s[i] != '@')
        for (; i<strlen(s); i++)
            t[i + 1] = s[i];

    t[i + 1] = '\0';
}

intitem_found(char *s)
{ // Check for items in a state.
    inti;

    for (i = 0; i<closure_item_index; i++)
    {
        if(!strcmp(s, items[state_index][i])) // If the strings match.
            return1;
    }

    return0;
}

intisterminal(char s)
{
    inti;

    for (i = 0; i<no_of_terminals; i++)
        if (s == terminals[i])
            return1;

    return0;
}

voidclosure(char *s)
{
    inti, j;

    for (i = 0; s[i] != '.'; i++)
        ;

    i++;

    if(!item_found(s))
    {
        strcpy(items[state_index][closure_item_index], s);
        closure_item_index++;

        //      printf("%s\n", items[state_index][closure_item_index-1]);
    }

    if (s[i] == s[0] && s[i - 2] == '>') // To avoid infinite loop due to left recursion.
        return;

    if (isterminal(s[i]))
        return;

    else
    { // Not a terminal
        for (j = 0; j <no_of_productions; j++)
        {
            chartemp[100];

            if (augmented_grammar[j][0] == s[i])
            {
                generate_item(augmented_grammar[j], temp);
                closure(temp);
            }
        }
    }
}

int Goto1(char s, chartemp[][100])
{ // Find Goto on symbol s. GOTO(goto_state_index, s)
    inti, j;
    int n = 0;
    char t, temp2[100];

    if (s == '\0')
    {
        return n;
    }

    for (i = 0; i<no_of_items[goto_state_index]; i++)
    {
        strcpy(temp2, items[goto_state_index][i]);

        for (j = 0; temp2[j] != '.'; j++)
            ;

        if (temp2[j + 1] == '\0')
            continue;

        if (temp2[j + 1] == s)
        {
            t = temp2[j];
            temp2[j] = temp2[j + 1];
            temp2[j + 1] = t;

            strcpy(temp[n], temp2);
            n++;
        }
    }

    return n;
}

intstate_found(char *s)
{ // Checks for existance of same state.
    inti;

    for (i = 0; i<state_index; i++)
    {
        if(!strcmp(s, items[i][0])) // Compare with the first item of each state.
            return1;
    }

    return0;
}

inttransition_item_found(char *t_items, char s, intt_index)
{
    inti;

    for (i = 0; i<t_index; i++)
        if (s == t_items[i])
            return1;

    return0;
}

voidcompute_closure_goto()
{
    chartemp[100][100], transition_items[100];
    inti, no_of_goto_items, j, transition_index = 0;

    generate_item(augmented_grammar[0], temp[0]);

    closure(temp[0]);

    no_of_items[state_index] = closure_item_index;
    closure_item_index = 0;

    state_index++;
    // state_index is 1 now.

    while (goto_state_index<30)
    {
        transition_index = 0;
        transition_items[transition_index] = '\0';

        for (i = 0; i<no_of_items[goto_state_index]; i++)
        {
            for (j = 0; items[goto_state_index][i][j] != '.'; j++)
                ;
            j++;

            if(!transition_item_found(transition_items, items[goto_state_index][i][j], transition_index))
            {
                transition_items[transition_index] = items[goto_state_index][i][j];
                transition_index++;
            }
        }

        transition_items[transition_index] = '\0';

        for (i = 0; i<transition_index; i++)
        {
            intadd_flag = 0;

            no_of_goto_items = Goto1(transition_items[i], temp);

            for (j = 0; j <no_of_goto_items; j++)
            {
                if(!state_found(temp[j]))
                {
                    add_flag = 1;
                    closure(temp[j]);
                }
                else
                    break;
            }
            if (add_flag)
            {
                no_of_items[state_index] = closure_item_index;
                closure_item_index = 0;
                state_index++;
            }
        }

        goto_state_index++;
    }

    no_of_states = state_index;
}

voidprint()
{
    inti, j;

    printf("\nNumber of states = %d.\n", no_of_states);

    for (i = 0; i<no_of_states; i++)
    {
        printf("\n\nItems in State %d...\n\n", i);

        for (j = 0; j <no_of_items[i]; j++)
            printf("%s\n", items[i][j]);
    }
}

voidstart()
{
    charstr[100];

    printf("Enter number of productions : ");
    scanf("%d", &no_of_productions);

    printf("Enter the productions : \n");

    inti;
    for (i = 1; i<= no_of_productions; i++)
        scanf("%s", augmented_grammar[i]);

    printf("\n\nAugmented Grammar is...\n\n");

    strcpy(augmented_grammar[0], "Z->");
    str[0] = augmented_grammar[1][0];
    str[1] = '\0';
    strcat(augmented_grammar[0], str);

    no_of_productions++;

    for (i = 0; i<no_of_productions; i++)
        printf("%s\n", augmented_grammar[i]);

    initialize_items();

    compute_closure_goto();

    print();
}
parsingtable.h header file:
// Parsing Table.
intflUse = -1;
structParsing_Table
{ // Structure to represent the Parsing Table.
    charACTION[30][100][100];
    intGOTO[30][100];
} table;

voidinitialize_table()
{ // Initialize all entries to indicate Error.
    inti, j;

    for (i = 0; i<no_of_states; i++)
    {
        for (j = 0; j <no_of_terminals; j++)
            strcpy(table.ACTION[i][j], "e");

        for (j = 0; j <no_of_nonterminals; j++)
            table.GOTO[i][j] = -1;
    }
}

voidprint_table()
{
    inti, j;

    printf("%10s   ", "");

    for (i = 0; i<no_of_terminals; i++)
        printf("%10c", terminals[i]);

    printf(" | ");

    for (i = 1; i<no_of_nonterminals; i++)
        printf("%10c", nonterminals[i]);

    printf("\n\n");

    for (i = 0; i<no_of_states; i++)
    {
        printf("%10d | ", i);

        for (j = 0; j <no_of_terminals; j++)
        {
            if(!strcmp(table.ACTION[i][j], "e"))
                printf("%10s", ".");
            else
                printf("%10s", table.ACTION[i][j]);
        }

        printf(" | ");

        for (j = 1; j <no_of_nonterminals; j++)
        {
            if (table.GOTO[i][j] == -1)
                printf("%10s", ".");
            else
                printf("%10d", table.GOTO[i][j]);
        }

        printf("\n");
    }
}

voidGoto(inti, int item, char *temp)
{ // Computes goto for 'item'th item of 'i'th state.
    char t;

    strcpy(temp, items[i][item]);

    for (i = 0; temp[i] != '\0'; i++)
        if (temp[i] == '.')
        {
            t = temp[i];
            temp[i] = temp[i + 1];
            temp[i + 1] = t;
            break;
        }
}

intget_state(char *t, int state)
{ // Returns the state of a given item.
    inti, j;

    for (i = state; i< (no_of_states + state); i++)
    { // Start searching from current state and then wrap around.
        for (j = 0; j <no_of_items[i % no_of_states]; j++)
        {
            if(!strcmp(t, items[i % no_of_states][j]))
                returni % no_of_states;
        }
    }

    printf("No match for string! (%s)\n", t);
}

intget_pos(int flag, char symbol)
{ // Returns index of a terminal or a non-terminal from the corresponding arrays.
    inti;

    if (flag == 0)
        for (i = 0; i<no_of_terminals; i++)
        {
            if (terminals[i] == symbol)
                returni;
        }
    else
        for (i = 0; i<no_of_nonterminals; i++)
        {
            if (nonterminals[i] == symbol)
                returni;
        }

    if (flag == 0)
        printf("Terminal not found in get_pos! (%c)\n", symbol);
    else
        printf("Non-terminal not found in get_pos! (%c)\n", symbol);
}

intget_production_no(char *item)
{ // Given an item, it returns the production number of the equivalent production.
    inti, j;

    charproduction[20];

    for (i = 0, j = 0; item[i] != '\0'; i++)
        if (item[i] != '.')
        {
            production[j] = item[i];
            j++;
        }

    if (j == 3)
    { // If it's an epsilon production, the production won't have a body.
        production[j] = '@';
        j++;
    }

    production[j] = '\0';

    for (i = 0; i<no_of_productions; i++)
    {
        if(!strcmp(production, augmented_grammar[i]))
            returni;
    }

    printf("Production not found! (%s)\n", production);
}

voidcompute_action()
{
    inti, item, j;
    chartemp[100], symbol;

    for (i = 0; i<no_of_states; i++)
    {
        for (item = 0; item <no_of_items[i]; item++)
        {
            char *s = strchr(items[i][item], '.'); // Returns a substring starting with '.'

            if(!s)
            { // In case of error.
                printf("Item not found! State = %d, Item = %d\n", i, item);
                exit(-1);
            }

            if (strlen(s) >1)
            { // dot is not at end of string. SHIFT ACTION!!
                if (isterminal(s[1]))
                { // For terminals. Rule 1.
                    if(!strcmp(table.ACTION[i][get_pos(0, s[1])], "e"))
                    { // Multiple entries conflict.
                        // printf("\n\nConflict(1): Multiple entries found for (%d, %c)\n", i, s[1]);
                        // printf("\nGrammar is not in LR(0)!\n");
                        flUse = 1;
                    }

                    charstate[3];

                    Goto(i, item, temp); // Store item in temp.
                    j = get_state(temp, i);

                    sprintf(state, "%d", j);
                    strcpy(temp, "S:");
                    strcat(temp, state);

                    strcpy(table.ACTION[i][get_pos(0, s[1])], temp);
                }

                else
                { // For non-terminals. Rule 4.

                    Goto(i, item, temp); // Store item in temp.
                    j = get_state(temp, i);

                    if (table.GOTO[i][get_pos(1, s[1])] == -1) // To avoid multiple entries.
                        table.GOTO[i][get_pos(1, s[1])] = j;
                }
            }

            else
            { // dot is at end of string. Rule 2. REDUCE ACTION!!
                charf[10], production_no[3];
                int k, n;
                n = get_production_no(items[i][item]); // Get production number from Augmented Grammar.

                sprintf(production_no, "%d", n);
                strcpy(temp, "R:");
                strcat(temp, production_no);

                strcpy(f, FOLLOW[get_pos(1, items[i][item][0])]); // Get follow of production head.
                for (k = 0; f[k] != '\0'; k++)
                {
                    if(!strcmp(table.ACTION[i][get_pos(0, f[k])], "e"))
                    { // Multiple entries conflict.
                        // printf("\n\nConflict(3): Multiple entries found for (%d, %c)\n", i, f[k]);
                        // printf("\nGrammar is not in LR(0)!\n");
                        flUse = 1;
                    }

                    strcpy(table.ACTION[i][get_pos(0, f[k])], temp);
                }
            }
        }
    }

    strcpy(table.ACTION[1][get_pos(0, '$')], "acc"); // Accept-entry for item [S'->S.]
}

voidcreate_parsing_table()
{
    initialize_table();

    compute_action();

    if (flUse == 1)
    {
        printf("\n\nConflict(3): Multiple entries found!!\n");
        printf("\nGrammar is not accepted by LR(0)!\n");
        printf("\n\nGrammar is now checked for SLR(1):\n");
        printf("\nThe Parsing Table for the given grammar for SLR(1) parser is...\n\n");
    }
    else
    {
        printf("\nSince Grammar is accepted by LR(0), it is also accepted by SLR(1) : \n");
        printf("\nThe Parsing Table for the given grammar is...\n\n");
        printf("\nThe Parsing Table for the given grammar for both LR(0) and SLR(1) parsers is...\n\n");
    }

    print_table();

    printf("\n\n");
}
first_follow.h header file:
intepsilon_flag = 0;

voidinitialize_first_follow()
{ // Initialize to null strings.
    inti;

    for (i = 0; i<no_of_terminals; i++)
        FIRST[0][i][0] = '\0';

    for (i = 0; i<no_of_nonterminals; i++)
    {
        FIRST[1][i][0] = '\0';
        FOLLOW[i][0] = '\0';
    }
}

voidadd_symbol(int flag, char *f, char *s)
{ // Adds a symbol to FIRST or FOLLOW if it doesn't already exist in it.
    inti, j;
    int found;

    if (flag == 0)
    { // For FIRST.
        for (i = 0; i<strlen(s); i++)
        {
            found = 0;

            for (j = 0; j <strlen(f); j++)
            {
                if (s[i] == f[j])
                    found = 1;
            }

            if(!found)
            {
                chartemp[2];
                temp[0] = s[i];
                temp[1] = '\0';
                strcat(f, temp);
            }
        }
    }

    else
    { // For FOLLOW.
        for (i = 0; i<strlen(s); i++)
        {
            found = 0;

            if (s[i] == '@')
            {
                epsilon_flag = 1;
                continue;
            }

            for (j = 0; j <strlen(f); j++)
            {
                if (s[i] == f[j])
                    found = 1;
            }

            if(!found)
            {
                chartemp[2];
                temp[0] = s[i];
                temp[1] = '\0';
                strcat(f, temp);
            }
        }
    }
}

voidfirst(char s)
{
    if (isterminal(s))
    { // For terminals.
        FIRST[0][get_pos(0, s)][0] = s;
        FIRST[0][get_pos(0, s)][1] = '\0';
    }

    else
    { // For non-terminals.
        inti, flag = 0;
        for (i = 0; i<no_of_productions; i++)
        {
            if (augmented_grammar[i][0] == s)
            { // Productions with head as s.
                int j;

                for (j = 0; augmented_grammar[i][j] != '>'; j++)
                    ;
                j++;
                charnext_sym = augmented_grammar[i][j];

                if (next_sym == '@')
                { // Epsilon Production.
                    add_symbol(0, FIRST[1][get_pos(1, s)], "@");
                    flag = 1;
                }

                else
                {
                    if (next_sym == s)
                    { // In case of left recursion, to avoid infinite loop.
                        if (flag)
                            next_sym = augmented_grammar[i][++j];
                        else
                            continue;
                    }

                    first(next_sym); // Recursive call, to find FIRST of next symbol.

                    if (isterminal(next_sym)) // Add first of next symbol to first of current symbol.
                        add_symbol(0, FIRST[1][get_pos(1, s)], FIRST[0][get_pos(0, next_sym)]);

                    else
                        add_symbol(0, FIRST[1][get_pos(1, s)], FIRST[1][get_pos(1, next_sym)]);
                }
            }
        }
    }
}

voidcompute_first()
{
    inti;

    for (i = 0; i<no_of_terminals; i++)
        first(terminals[i]);

    for (i = 0; i<no_of_nonterminals; i++)
        first(nonterminals[i]);

    // for (i = 0; i<no_of_nonterminals; i++)
    //  printf("%s\n", FIRST[get_pos(1, nonterminals[i])]);
}

// FOLLOW

voidfollow(char s)
{
    if (s == nonterminals[0])
        add_symbol(1, FOLLOW[0], "$");

    elseif (s == nonterminals[1])
        add_symbol(1, FOLLOW[1], "$");

    else
    {

        inti, j;
        for (i = 0; i<no_of_productions; i++)
        {
            for (j = 3; j <strlen(augmented_grammar[i]); j++)
            {
                epsilon_flag = 0;

                if (augmented_grammar[i][j] == s)
                {
                    charnext_sym = augmented_grammar[i][j + 1];

                    if (next_sym != '\0')
                    {                             // If current symbol is not the last symbol of production body.
                        if (isterminal(next_sym)) // For terminals.
                            add_symbol(1, FOLLOW[get_pos(1, s)], FIRST[0][get_pos(0, next_sym)]);
                        else
                        { // For non-terminals.
                            add_symbol(1, FOLLOW[get_pos(1, s)], FIRST[1][get_pos(1, next_sym)]);

                            if (epsilon_flag)
                            { // If FIRST[next_sym] has epsilon, find FOLLOW[next_sym].
                                follow(next_sym);
                                add_symbol(1, FOLLOW[get_pos(1, s)], FOLLOW[get_pos(1, next_sym)]);
                            }
                        }
                    }

                    else
                    {                                    // If current symbol is the last symbol of production body.
                        follow(augmented_grammar[i][0]); // Follow of production head.
                        add_symbol(1, FOLLOW[get_pos(1, s)], FOLLOW[get_pos(1, augmented_grammar[i][0])]);
                    }
                }
            }
        }
    }
}

voidcompute_follow()
{
    inti;

    for (i = 0; i<no_of_nonterminals; i++)
        follow(nonterminals[i]);

    // for (i = 0; i<no_of_nonterminals; i++)
    //  printf("%s\n", FOLLOW[get_pos(1, nonterminals[i])]);
}










Output:

 
 


